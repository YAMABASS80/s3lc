#!/usr/bin/env python3
from s3_lifecycle.s3lc import S3LifeCycle
import argparse

def get_args():
    parser = argparse.ArgumentParser(
        description='S3 Object Lifecycle configuration CLI.')
    parser.add_argument(
        '-b','--bucket',
        action='store',
        dest='bucket',
        required=True,
        help='S3 Bucket Name'
    )
    parser.add_argument(
        '-p','--prefix',
        action='store',
        dest='prefix',
        required=True,
        help='S3 prefix name to apply life cycle rule.'
    )
    parser.add_argument(
        '-n','--rule-name',
        action='store',
        dest='rule_name',
        required=True,
        help='S3 object life cycle rule name. ex) logs. Note: This must be unique in the S3 bucket.'
    )
    parser.add_argument(
        '-d','--transition-days',
        action='store',
        dest='transition_days',
        type=int,
        required=True,
        help='Indicates the number of days after creation when objects are transitioned to the specified storage class. '
    )
    parser.add_argument(
        '-s','--storage-class',
        action='store',
        dest='storage_class',
        required=True,
        choices=["GLACIER","STANDARD_IA","ONEZONE_IA","INTELLIGENT_TIERING","DEEP_ARCHIVE"],
        help='The storage class to which you want the object to transition.'
    )
    return parser.parse_args()

def main():
    args = get_args()
    s3lc = S3LifeCycle(bucket=args.bucket)

    rules = s3lc.get_rules()
    rule_to_add = s3lc.create_rule(
        prefix=args.prefix,
        rule_name=args.rule_name,
        transition_days=args.transition_days,
        storage_class=args.storage_class
    )
    rules.append(rule_to_add)

    s3lc.put_rules(rules)

    updated_rules = s3lc.get_rules()

if __name__ == "__main__":
    main()

